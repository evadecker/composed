---

---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Composed</title>
    <meta
      name="description"
      content="What does it look like to compose music for non-linear time? How do we visualize alternative space-times for sound?"
    />
    <meta property="og:image" content="/composed.png" />
    <meta
      property="og:image:alt"
      content="Music staves twist and collapse innward."
    />
    <script
      is:inline
      src="https://cdn.usefathom.com/script.js"
      data-site="SPEPXCSP"
      defer></script>
  </head>
  <body>
    <div id="p5canvas"></div>
  </body>
</html>

<script>
  import { Pane } from "tweakpane";
  import p5 from "p5";
  // No existing type defs for p5.brush
  // @ts-ignore
  import * as brush from "p5.brush";

  const PARAMS = {
    background: "#f4ecd2",
    stroke: "#12110f",
    strokeWeight: 2,
    field: "truncated",
    staves: 9,
    square: false,
  };

  const sketch = (p: p5) => {
    const pane = new Pane({
      title: "Parameters",
    });

    let background = PARAMS.background;
    let stroke = PARAMS.stroke;
    let strokeWeight = PARAMS.strokeWeight;
    let staves = PARAMS.staves;
    let isSquare = PARAMS.square;

    const margin = p.min(p.windowWidth, p.windowHeight) * 0.08;

    let canvasWidth = p.windowWidth;
    let canvasHeight = p.windowHeight;

    brush.instance(p);

    pane
      .addBinding(PARAMS, "background", {
        label: "Background",
      })
      .on("change", (value) => {
        background = value.value;
        p.redraw();
      });

    pane
      .addBinding(PARAMS, "stroke", {
        label: "Stroke",
      })
      .on("change", (value) => {
        stroke = value.value;
        p.redraw();
      });

    pane
      .addBinding(PARAMS, "strokeWeight", {
        label: "Weight",
        step: 1,
        min: 1,
        max: 10,
      })
      .on("change", (value) => {
        strokeWeight = value.value;
        p.redraw();
      });

    pane.addBlade({
      view: "separator",
    });

    pane
      .addBinding(PARAMS, "staves", {
        label: "Staves",
        step: 1,
        max: 12,
        min: 3,
      })
      .on("change", (value) => {
        staves = value.value;
        p.redraw();
      });

    p.setup = () => {
      p.createCanvas(canvasWidth, canvasHeight, p.WEBGL);
      p.angleMode(p.DEGREES);
      p.pixelDensity(3);
      p.noLoop();

      brush.load();

      brush.field(PARAMS.field);

      brush.addField("range", function (t: number, field: number[][]) {
        for (let column = 0; column < field.length; column++) {
          let randomAngle = p.random(-30, 30);
          for (let row = 0; row < field[0].length; row++) {
            let angle = p.noise(column, row, t) - 0.5 + randomAngle;
            field[column][row] = angle;
          }
        }
        return field;
      });

      brush.addField("converge", function (_t: number, field: number[][]) {
        let converge = p.random(500, 720);
        let offset = p.random(-60, 60);

        for (let column = 0; column < field.length; column++) {
          for (let row = 0; row < field[0].length; row++) {
            let angle =
              (row / field[0].length) * -converge + converge / 2 + offset;
            field[column][row] = angle;
          }
        }
        return field;
      });

      brush.addField("diverge", function (_t: number, field: number[][]) {
        let diverge = p.random(30, 720);

        for (let column = 0; column < field.length; column++) {
          for (let row = 0; row < field[0].length; row++) {
            let angle = (row / field[0].length) * diverge - diverge / 2;
            field[column][row] = angle;
          }
        }
        return field;
      });

      brush.addField("disabled", function (_t: number, field: number[][]) {
        return field;
      });

      brush.field(PARAMS.field);

      pane.addBlade({
        view: "separator",
      });

      pane
        .addBinding(PARAMS, "field", {
          label: "Distortion",
          options: {
            converge: "converge",
            curved: "curved",
            diverge: "diverge",
            range: "range",
            seabed: "seabed",
            truncated: "truncated",
            waves: "waves",
            zigzag: "zigzag",
            disabled: "disabled",
          },
        })
        .on("change", (distortion) => {
          brush.field(distortion.value);
          p.redraw();
        });
      pane.addButton({ title: "Regenerate" }).on("click", () => {
        brush.refreshField();
        p.redraw();
      });

      pane.addBlade({
        view: "separator",
      });

      pane
        .addBinding(PARAMS, "square", {
          label: "Square",
        })
        .on("change", (value) => {
          isSquare = value.value;
          p.redraw();
        });

      pane.addBlade({
        view: "separator",
      });

      const saveImage = () => {
        let timestamp = new Date().toISOString();
        p.save(`composed-${p.str(timestamp)}.png`);
      };
      pane.addButton({ title: "Save .png" }).on("click", saveImage);

      pane
        .addButton({ title: "A project by Eva Decker" })
        .on("click", () => (window.location.href = "https://eva.town"));
    };

    p.draw = () => {
      if (isSquare) {
        canvasWidth = p.min(p.windowWidth, p.windowHeight);
        canvasHeight = canvasWidth;
      } else {
        canvasWidth = p.windowWidth;
        canvasHeight = p.windowHeight;
      }

      p.background(background);

      p.translate(-canvasWidth / 2, -canvasHeight / 2);

      // Create music staves
      for (let i = 0; i < staves; i++) {
        const lineHeight = canvasHeight * 0.01;

        const startY = p.lerp(
          margin,
          canvasHeight - margin - lineHeight * 5,
          i / (staves - 1)
        );

        // Each 5-line staff
        for (let j = 0; j < 5; j++) {
          brush.set("rotring", stroke, strokeWeight);
          const posY = startY + lineHeight * j;
          brush.flowLine(margin, posY, canvasWidth - margin * 2, 0);
        }

        // Staff barlines
        brush.strokeWeight(strokeWeight * 3);
        brush.flowLine(margin, startY, lineHeight * 4, -90);
        brush.flowLine(canvasWidth - margin, startY, lineHeight * 4, -90);
      }
    };
  };

  const canvas = document.getElementById("p5canvas");
  export const myp5 = new p5(sketch, canvas!);
</script>

<style>
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  * {
    margin: 0;
  }

  img,
  picture,
  video,
  canvas,
  svg {
    display: block;
    max-width: 100%;
  }

  #p5canvas {
    background: #f4ecd2;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100dvh;
  }
</style>
